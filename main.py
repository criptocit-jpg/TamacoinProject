import os
import telebot
from telebot import types
import datetime
import time # –î–ª—è —Å–Ω–∞, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è (–ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é)
from flask import Flask, request # –î–ª—è –≤–µ–±—Ö—É–∫–æ–≤

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è - —ç—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–∫—Ä–∏–ø—Ç–∞
# –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–∞ Render.com
script_dir = os.path.dirname(os.path.abspath(__file__))
os.chdir(script_dir)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
from db_manager import db
from pet_config import (
    PET_TYPES, PET_IMAGES,
    WELCOME_BONUS_AMOUNT, WELCOME_BONUS_ACTIONS_REQUIRED,
    DAILY_BONUS_AMOUNT, DAILY_BONUS_INTERVAL_HOURS,
    FOOD_COST, MEDICINE_COST, NEW_PET_COST,
    FEED_REWARD, PLAY_REWARD, CLEAN_REWARD,
    ACTION_COOLDOWN_HOURS,
    HUNGER_DECAY_PER_HOUR, HAPPINESS_DECAY_PER_HOUR, HEALTH_DECAY_PER_HOUR,
    HUNGER_THRESHOLD_SAD, HAPPINESS_THRESHOLD_SAD, HEALTH_THRESHOLD_SICK,
    INFO_TEXT, HELP_TEXT, TOTAL_INITIAL_SUPPLY, ADMIN_TELEGRAM_ID
)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –∏ –≤–µ–±—Ö—É–∫–æ–≤ ---
# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
# –í–ê–ñ–ù–û: –ù–ï –í–ü–ò–°–´–í–ê–ô–¢–ï –¢–û–ö–ï–ù –ù–ê–ü–†–Ø–ú–£–Æ –ó–î–ï–°–¨! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Render.com
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if BOT_TOKEN is None:
    raise ValueError("TELEGRAM_BOT_TOKEN environment variable not set. Please set it on Render.com")

bot = telebot.TeleBot(BOT_TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Flask –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤
app = Flask(__name__)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ UTC –∏ —Ñ–æ—Ä–º–∞—Ç–µ ISO
def get_current_iso_time():
    return datetime.datetime.now(datetime.timezone.utc).isoformat()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ISO —Å—Ç—Ä–æ–∫–∏ –≤ datetime –æ–±—ä–µ–∫—Ç
def parse_iso_time(iso_str):
    if iso_str:
        return datetime.datetime.fromisoformat(iso_str)
    return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞ (–≥–æ–ª–æ–¥, —Å—á–∞—Å—Ç—å–µ, –∑–¥–æ—Ä–æ–≤—å–µ)
# –ó–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–æ—à–µ–¥—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –±–∞–∑–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ decay
def update_pet_stats(pet_data):
    if not pet_data or not pet_data['is_alive']:
        return pet_data

    last_update_time = parse_iso_time(pet_data['last_state_update'])
    if not last_update_time: # –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ
        pet_data['last_state_update'] = get_current_iso_time()
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        db.update_pet_state(pet_data['owner_id'], pet_data['hunger'], pet_data['happiness'], pet_data['health'], pet_data['last_state_update'])
        return pet_data

    current_time = datetime.datetime.now(datetime.timezone.utc)
    time_diff_hours = (current_time - last_update_time).total_seconds() / 3600

    if time_diff_hours > 0:
        pet_data['hunger'] = max(0.0, pet_data['hunger'] - (HUNGER_DECAY_PER_HOUR * time_diff_hours))
        pet_data['happiness'] = max(0.0, pet_data['happiness'] - (HAPPINESS_DECAY_PER_HOUR * time_diff_hours))
        pet_data['health'] = max(0.0, pet_data['health'] - (HEALTH_DECAY_PER_HOUR * time_diff_hours)) # –±–∞–∑–æ–≤–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ
        
        # –£—Ö—É–¥—à–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏ –Ω–∏–∑–∫–æ–º –≥–æ–ª–æ–¥–µ/—Å—á–∞—Å—Ç—å–µ
        if pet_data['hunger'] < HUNGER_THRESHOLD_SAD:
            pet_data['health'] = max(0.0, pet_data['health'] - (HEALTH_DECAY_PER_HOUR * time_diff_hours * 0.5)) # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ
        if pet_data['happiness'] < HAPPINESS_THRESHOLD_SAD:
            pet_data['health'] = max(0.0, pet_data['health'] - (HEALTH_DECAY_PER_HOUR * time_diff_hours * 0.5)) # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ
        
        pet_data['last_state_update'] = get_current_iso_time()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–µ—Ä—Ç—å
        if pet_data['hunger'] <= 0 or pet_data['happiness'] <= 0 or pet_data['health'] <= 0:
            if pet_data['is_alive']: # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –Ω–µ —É–±–∏–≤–∞–µ–º —É–∂–µ –º–µ—Ä—Ç–≤–æ–≥–æ
                db.kill_pet(pet_data['owner_id'])
                pet_data['is_alive'] = 0
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å–º–µ—Ä—Ç–∏ –ø–∏—Ç–æ–º—Ü–∞
                user = db.get_user_by_db_id(pet_data['owner_id'])
                if user:
                    bot.send_message(user['telegram_id'],
                                     f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –ø–∏—Ç–æ–º–µ—Ü *{pet_data['name']}* —É–º–µ—Ä üòî. "
                                     f"–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –∑–∞ {NEW_PET_COST} Tamacoin —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /buy_pet.",
                                     parse_mode='Markdown')
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞ –≤ –ë–î (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∂–∏–≤ –∏–ª–∏ —Ç–æ–ª—å–∫–æ —á—Ç–æ —É–º–µ—Ä)
        db.update_pet_state(pet_data['owner_id'], pet_data['hunger'], pet_data['happiness'], pet_data['health'], pet_data['last_state_update'])
    
    return pet_data

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –ø–∏—Ç–æ–º—Ü–∞ –∏ –µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def get_pet_status_and_image(user_id, pet_data):
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∏—Ç–æ–º—Ü–∞ –ø–µ—Ä–µ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    pet_data = update_pet_stats(pet_data)

    if not pet_data or not pet_data['is_alive']:
        return "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞ –∏–ª–∏ –æ–Ω –º–µ—Ä—Ç–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –∑–∞–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–≥–æ –∏–ª–∏ /buy_pet, —á—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏.", PET_IMAGES['dead_pet']

    status_text = f"–í–∞—à –ø–∏—Ç–æ–º–µ—Ü: *{pet_data['name']}* ({PET_TYPES[pet_data['pet_type']]['name']})\n\n"
    status_text += f"–ì–æ–ª–æ–¥: `{pet_data['hunger']:.1f}%`\n"
    status_text += f"–°—á–∞—Å—Ç—å–µ: `{pet_data['happiness']:.1f}%`\n"
    status_text += f"–ó–¥–æ—Ä–æ–≤—å–µ: `{pet_data['health']:.1f}%`\n"

    # –í—ã–±–∏—Ä–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    image_key = pet_data['pet_type'] # –ë–∞–∑–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    
    if pet_data['hunger'] < HUNGER_THRESHOLD_SAD or \
       pet_data['happiness'] < HAPPINESS_THRESHOLD_SAD or \
       pet_data['health'] < HEALTH_THRESHOLD_SICK:
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è "–≥—Ä—É—Å—Ç–Ω–æ–≥–æ" —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if PET_IMAGES.get(pet_data['pet_type'] + '_hungry'):
            image_key = pet_data['pet_type'] + '_hungry'
        # –ò–Ω–∞—á–µ –æ—Å—Ç–∞–µ–º—Å—è —Å –±–∞–∑–æ–≤—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º

    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è "–±–æ–ª—å–Ω–æ–≥–æ" —Å–æ—Å—Ç–æ—è–Ω–∏—è, –æ–Ω–æ –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    if pet_data['health'] < HEALTH_THRESHOLD_SICK and PET_IMAGES.get(pet_data['pet_type'] + '_sick'):
        image_key = pet_data['pet_type'] + '_sick'


    if PET_IMAGES.get(image_key):
        return status_text, PET_IMAGES[image_key]
    else:
        # –ï—Å–ª–∏ –Ω–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–≥–æ, –Ω–∏ –±–∞–∑–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –∏–ª–∏ –ø–µ—Ä–≤–æ–µ –ø–æ–ø–∞–≤—à–µ–µ—Å—è
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ PET_IMAGES –Ω–µ –ø—É—Å—Ç
        return status_text, list(PET_IMAGES.values())[0] if PET_IMAGES else None


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è
def is_action_on_cooldown(last_action_time_str):
    if last_action_time_str:
        last_action_time = parse_iso_time(last_action_time_str)
        current_time = datetime.datetime.now(datetime.timezone.utc)
        time_diff_hours = (current_time - last_action_time).total_seconds() / 3600
        return time_diff_hours < ACTION_COOLDOWN_HOURS
    return False

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user = db.get_user(message.from_user.id)
    if not user:
        user = db.create_user(message.from_user.id, message.from_user.username)

    user_pet = db.get_pet(user['id'])

    if user_pet and user_pet['is_alive']:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–∏—Ç–æ–º–µ—Ü! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–ª–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
        return

    markup = types.InlineKeyboardMarkup(row_width=1)
    itembtn1 = types.InlineKeyboardButton(PET_TYPES['toothless']['name'], callback_data='choose_pet_toothless')
    itembtn2 = types.InlineKeyboardButton(PET_TYPES['light_fury']['name'], callback_data='choose_pet_light_fury')
    itembtn3 = types.InlineKeyboardButton(PET_TYPES['stormfly']['name'], callback_data='choose_pet_stormfly')
    markup.add(itembtn1, itembtn2, itembtn3)

    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞:", reply_markup=markup)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–µ–≤
    for pet_key, pet_info in PET_TYPES.items():
        if PET_IMAGES.get(pet_key): # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            try:
                with open(PET_IMAGES[pet_key], 'rb') as photo:
                    bot.send_photo(message.chat.id, photo, caption=pet_info['name'])
            except FileNotFoundError:
                bot.send_message(message.chat.id, f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è {pet_info['name']} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å: {PET_IMAGES[pet_key]}")
        else:
            bot.send_message(message.chat.id, f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è {pet_info['name']} –Ω–µ —É–∫–∞–∑–∞–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")


@bot.message_handler(commands=['status', 'profile'])
def show_status(message):
    user = db.get_user(message.from_user.id)
    if not user or not user['pet_id']:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –∑–∞–≤–µ—Å—Ç–∏ –µ–≥–æ!")
        return

    pet_data = db.get_pet(user['id']) # –ü–æ–ª—É—á–∞–µ–º –ø–∏—Ç–æ–º—Ü–∞ –ø–æ owner_id (user['id'])
    
    if not pet_data:
        bot.send_message(message.chat.id, "–ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–∏—Ç–æ–º—Ü–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /start —Å–Ω–æ–≤–∞.")
        return

    status_text, pet_image_path = get_pet_status_and_image(user['id'], pet_data)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    status_text += f"\n\n–ë–∞–ª–∞–Ω—Å Tamacoin: `{user['balance']}ü™ô`"

    if pet_image_path:
        try:
            with open(pet_image_path, 'rb') as photo:
                bot.send_photo(message.chat.id, photo, caption=status_text, parse_mode='Markdown')
        except FileNotFoundError:
            bot.send_message(message.chat.id, status_text + f"\n\n_–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å: {pet_image_path}_", parse_mode='Markdown')
    else:
        bot.send_message(message.chat.id, status_text, parse_mode='Markdown')


@bot.message_handler(commands=['help'])
def send_help(message):
    bot.send_message(message.chat.id, HELP_TEXT, parse_mode='Markdown')

@bot.message_handler(commands=['info'])
def send_info(message):
    bot.send_message(message.chat.id, INFO_TEXT, parse_mode='Markdown')

@bot.message_handler(commands=['users_count'])
def send_users_count(message):
    count = db.get_total_users_with_pets()
    bot.send_message(message.chat.id, f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–≤—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤: *{count}*.", parse_mode='Markdown')


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ ---
@bot.callback_query_handler(func=lambda call: call.data.startswith('choose_pet_'))
def callback_choose_pet(call):
    chat_id = call.message.chat.id
    user_telegram_id = call.from_user.id
    message_id = call.message.message_id
    
    user = db.get_user(user_telegram_id)
    if not user:
        user = db.create_user(user_telegram_id, call.from_user.username)

    user_pet = db.get_pet(user['id'])

    if user_pet and user_pet['is_alive']:
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∂–∏–≤–æ–π –ø–∏—Ç–æ–º–µ—Ü!")
        bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                              text="–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–∏—Ç–æ–º–µ—Ü. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.",
                              reply_markup=None)
        return

    pet_type_key = call.data.replace('choose_pet_', '')
    if pet_type_key not in PET_TYPES:
        bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–∏—Ç–æ–º—Ü–∞.")
        return

    # –ï—Å–ª–∏ –ø–∏—Ç–æ–º–µ—Ü –º–µ—Ä—Ç–≤ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
    pet_name = PET_TYPES[pet_type_key]['name'] # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–º—è —Ç–∏–ø–∞ –∫–∞–∫ –∏–º—è –ø–∏—Ç–æ–º—Ü–∞
    new_pet = db.create_pet(user['id'], pet_type_key, pet_name)
    
    bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                          text=f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–∏—Ç–æ–º—Ü–∞: *{pet_name}*!",
                          parse_mode='Markdown', reply_markup=None)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–∏—Ç–æ–º—Ü–∞
    status_text, pet_image_path = get_pet_status_and_image(user['id'], new_pet)
    status_text += f"\n\n–ë–∞–ª–∞–Ω—Å Tamacoin: `{user['balance']}ü™ô`" # –ü–æ–∫–∞ 0

    if pet_image_path:
        try:
            with open(pet_image_path, 'rb') as photo:
                bot.send_photo(chat_id, photo, caption=status_text, parse_mode='Markdown')
        except FileNotFoundError:
            bot.send_message(chat_id, status_text + f"\n\n_–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å: {pet_image_path}_", parse_mode='Markdown')
    else:
        bot.send_message(chat_id, status_text, parse_mode='Markdown')
    
    bot.send_message(chat_id, "–¢–µ–ø–µ—Ä—å –Ω–∞—á–Ω–∏—Ç–µ —É—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ –Ω–∏–º! –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ —Å–æ–≤–µ—Ä—à–∏—Ç—å 5 –¥–µ–π—Å—Ç–≤–∏–π, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å.")


# --- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–∏—Ç–æ–º—Ü–µ–º ---

def _perform_pet_action(message, action_type, reward_amount, stat_to_increase, increase_value, success_message, cooldown_message):
    user_telegram_id = message.from_user.id
    user = db.get_user(user_telegram_id)

    if not user or not user['pet_id']:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –∑–∞–≤–µ—Å—Ç–∏ –µ–≥–æ!")
        return

    pet_data = db.get_pet(user['id'])
    if not pet_data or not pet_data['is_alive']:
        bot.send_message(message.chat.id, "–í–∞—à –ø–∏—Ç–æ–º–µ—Ü –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –º–µ—Ä—Ç–≤. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–µ–π—Å—Ç–≤–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy_pet, —á—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–æ–≤–æ–≥–æ.")
        return
    
    pet_data = update_pet_stats(pet_data) # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏ –¥–µ–π—Å—Ç–≤–∏–µ–º

    last_action_time_str = pet_data.get(action_type)
    if is_action_on_cooldown(last_action_time_str):
        bot.send_message(message.chat.id, cooldown_message)
        return

    # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    current_time_iso = get_current_iso_time()
    db.update_pet_action_time(user['id'], action_type, current_time_iso)

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 100
    pet_data[stat_to_increase] = min(100.0, pet_data[stat_to_increase] + increase_value)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞ –≤ –ë–î
    db.update_pet_state(user['id'], pet_data['hunger'], pet_data['happiness'], pet_data['health'], pet_data['last_state_update'])

    # –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
    db.update_user_balance(user_telegram_id, reward_amount) # update_user_balance —Ç–µ–ø–µ—Ä—å –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ—Ç total_distributed_coins

    updated_balance = db.get_user(user_telegram_id)['balance']

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
    actions_count = db.increment_welcome_bonus_actions(user_telegram_id)
    if actions_count >= WELCOME_BONUS_ACTIONS_REQUIRED and user.get('welcome_bonus_actions_count', 0) < WELCOME_BONUS_ACTIONS_REQUIRED:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ–Ω—É—Å –µ—â–µ –Ω–µ –±—ã–ª –≤—ã–¥–∞–Ω (–ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±—ã–ª–æ –º–µ–Ω—å—à–µ)
        db.update_user_balance(user_telegram_id, WELCOME_BONUS_AMOUNT)
        db.reset_welcome_bonus_actions(user_telegram_id) # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        bot.send_message(message.chat.id,
                         f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å–æ–≤–µ—Ä—à–∏–ª–∏ {WELCOME_BONUS_ACTIONS_REQUIRED} –¥–µ–π—Å—Ç–≤–∏–π –∏ –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å: *{WELCOME_BONUS_AMOUNT} Tamacoin*!",
                         parse_mode='Markdown')
    
    bot.send_message(message.chat.id, f"{success_message} –í–∞—à –±–∞–ª–∞–Ω—Å: *{updated_balance} Tamacoin*.", parse_mode='Markdown')


@bot.message_handler(commands=['feed'])
def feed_pet(message):
    _perform_pet_action(
        message, 'last_fed', FEED_REWARD, 'hunger', 20.0, # –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≥–æ–ª–æ–¥ –Ω–∞ 20%
        "–í—ã –ø–æ–∫–æ—Ä–º–∏–ª–∏ –ø–∏—Ç–æ–º—Ü–∞! –û–Ω —Å—Ç–∞–ª –±–æ–ª–µ–µ —Å—ã—Ç—ã–º.",
        f"–í—ã —É–∂–µ –∫–æ—Ä–º–∏–ª–∏ –ø–∏—Ç–æ–º—Ü–∞ –º–µ–Ω–µ–µ —á–µ–º {ACTION_COOLDOWN_HOURS} —á–∞—Å –Ω–∞–∑–∞–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    )

@bot.message_handler(commands=['play'])
def play_with_pet(message):
    _perform_pet_action(
        message, 'last_played', PLAY_REWARD, 'happiness', 25.0, # –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–∞—Å—Ç—å–µ –Ω–∞ 25%
        "–í—ã –ø–æ–∏–≥—Ä–∞–ª–∏ —Å –ø–∏—Ç–æ–º—Ü–µ–º! –û–Ω –æ—á–µ–Ω—å —Å—á–∞—Å—Ç–ª–∏–≤.",
        f"–í—ã —É–∂–µ –∏–≥—Ä–∞–ª–∏ —Å –ø–∏—Ç–æ–º—Ü–µ–º –º–µ–Ω–µ–µ —á–µ–º {ACTION_COOLDOWN_HOURS} —á–∞—Å –Ω–∞–∑–∞–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    )

@bot.message_handler(commands=['clean'])
def clean_for_pet(message):
    _perform_pet_action(
        message, 'last_cleaned', CLEAN_REWARD, 'health', 15.0, # –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –Ω–∞ 15%
        "–í—ã —É–±—Ä–∞–ª–∏ –∑–∞ –ø–∏—Ç–æ–º—Ü–µ–º! –û–Ω —Å—Ç–∞–ª —á–∏—â–µ –∏ –∑–¥–æ—Ä–æ–≤–µ–µ.",
        f"–í—ã —É–∂–µ —É–±–∏—Ä–∞–ª–∏ –∑–∞ –ø–∏—Ç–æ–º—Ü–µ–º –º–µ–Ω–µ–µ —á–µ–º {ACTION_COOLDOWN_HOURS} —á–∞—Å –Ω–∞–∑–∞–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    )


@bot.message_handler(commands=['daily_bonus'])
def get_daily_bonus(message):
    user_telegram_id = message.from_user.id
    user = db.get_user(user_telegram_id)

    if not user:
        bot.send_message(message.chat.id, "–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.")
        return

    last_bonus_time_str = user.get('last_daily_bonus')
    current_time = datetime.datetime.now(datetime.timezone.utc)

    if last_bonus_time_str:
        last_bonus_time = parse_iso_time(last_bonus_time_str)
        time_diff_hours = (current_time - last_bonus_time).total_seconds() / 3600
        if time_diff_hours < DAILY_BONUS_INTERVAL_HOURS:
            remaining_time_seconds = (DAILY_BONUS_INTERVAL_HOURS * 3600) - (current_time - last_bonus_time).total_seconds()
            hours = int(remaining_time_seconds // 3600)
            minutes = int((remaining_time_seconds % 3600) // 60)
            bot.send_message(message.chat.id, f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ {hours} —á {minutes} –º–∏–Ω.")
            return

    db.update_user_balance(user_telegram_id, DAILY_BONUS_AMOUNT)
    db.update_last_daily_bonus(user_telegram_id, get_current_iso_time())
    updated_balance = db.get_user(user_telegram_id)['balance']
    bot.send_message(message.chat.id,
                     f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: *{DAILY_BONUS_AMOUNT} Tamacoin*! –í–∞—à –±–∞–ª–∞–Ω—Å: *{updated_balance} Tamacoin*.",
                     parse_mode='Markdown')

# --- –ú–∞–≥–∞–∑–∏–Ω –∏ –ø–æ–∫—É–ø–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ ---
@bot.message_handler(commands=['shop'])
def show_shop(message):
    user = db.get_user(message.from_user.id)
    if not user:
        bot.send_message(message.chat.id, "–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.")
        return

    markup = types.InlineKeyboardMarkup(row_width=1)
    item_food = types.InlineKeyboardButton(f"–ö—É–ø–∏—Ç—å –ï–¥—É ({FOOD_COST}ü™ô)", callback_data='buy_item_food')
    item_medicine = types.InlineKeyboardButton(f"–ö—É–ø–∏—Ç—å –õ–µ–∫–∞—Ä—Å—Ç–≤–æ ({MEDICINE_COST}ü™ô)", callback_data='buy_item_medicine')
    markup.add(item_food, item_medicine)

    bot.send_message(message.chat.id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω! –í–∞—à –±–∞–ª–∞–Ω—Å: *{user['balance']} Tamacoin*.\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å?",
                     reply_markup=markup, parse_mode='Markdown')

@bot.callback_query_handler(func=lambda call: call.data.startswith('buy_item_'))
def callback_buy_item(call):
    chat_id = call.message.chat.id
    user_telegram_id = call.from_user.id
    message_id = call.message.message_id

    user = db.get_user(user_telegram_id)
    if not user:
        bot.answer_callback_query(call.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                              text="–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", reply_markup=None)
        return

    item_type = call.data.replace('buy_item_', '')
    cost = 0
    item_name = ""
    
    if item_type == 'food':
        cost = FOOD_COST
        item_name = "–ï–¥–∞"
    elif item_type == 'medicine':
        cost = MEDICINE_COST
        item_name = "–õ–µ–∫–∞—Ä—Å—Ç–≤–æ"
    else:
        bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä.")
        return

    if user['balance'] < cost:
        bot.answer_callback_query(call.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Tamacoin!")
        bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                              text=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Tamacoin –¥–ª—è –ø–æ–∫—É–ø–∫–∏ *{item_name}*. –í–∞—à –±–∞–ª–∞–Ω—Å: *{user['balance']}*.",
                              parse_mode='Markdown', reply_markup=None)
        return

    # –°–ø–∏—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã
    db.update_user_balance(user_telegram_id, -cost)
    updated_balance = db.get_user(user_telegram_id)['balance']

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞ –ø–∏—Ç–æ–º—Ü–∞ (–µ—Å–ª–∏ –∂–∏–≤)
    pet_data = db.get_pet(user['id'])
    if pet_data and pet_data['is_alive']:
        pet_data = update_pet_stats(pet_data) # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∞
        if item_type == 'food':
            pet_data['hunger'] = min(100.0, pet_data['hunger'] + 30.0) # –ï–¥–∞ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–æ–ª–æ–¥
            db.update_pet_state(user['id'], pet_data['hunger'], pet_data['happiness'], pet_data['health'], pet_data['last_state_update'])
            bot.send_message(chat_id, f"–í—ã –∫—É–ø–∏–ª–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ï–¥—É. –í–∞—à –ø–∏—Ç–æ–º–µ—Ü —Å—Ç–∞–ª —Å—ã—Ç–Ω–µ–µ! –í–∞—à –±–∞–ª–∞–Ω—Å: *{updated_balance} Tamacoin*.", parse_mode='Markdown')
        elif item_type == 'medicine':
            pet_data['health'] = min(100.0, pet_data['health'] + 40.0) # –õ–µ–∫–∞—Ä—Å—Ç–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ
            db.update_pet_state(user['id'], pet_data['hunger'], pet_data['happiness'], pet_data['health'], pet_data['last_state_update'])
            bot.send_message(chat_id, f"–í—ã –∫—É–ø–∏–ª–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –õ–µ–∫–∞—Ä—Å—Ç–≤–æ. –í–∞—à –ø–∏—Ç–æ–º–µ—Ü —Å—Ç–∞–ª –∑–¥–æ—Ä–æ–≤–µ–µ! –í–∞—à –±–∞–ª–∞–Ω—Å: *{updated_balance} Tamacoin*.", parse_mode='Markdown')
    else:
        # –ï—Å–ª–∏ –ø–∏—Ç–æ–º–µ—Ü –º–µ—Ä—Ç–≤ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        bot.send_message(chat_id, f"–í—ã –∫—É–ø–∏–ª–∏ *{item_name}* –∑–∞ {cost} Tamacoin. –í–∞—à –±–∞–ª–∞–Ω—Å: *{updated_balance} Tamacoin*. –ù–æ –≤–∞—à –ø–∏—Ç–æ–º–µ—Ü –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –ø–æ—ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.", parse_mode='Markdown')

    bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                          text=f"–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä: *{item_name}*. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: *{updated_balance} Tamacoin*.",
                          parse_mode='Markdown', reply_markup=None)

@bot.message_handler(commands=['buy_pet'])
def buy_new_pet_command(message):
    user = db.get_user(message.from_user.id)
    if not user:
        bot.send_message(message.chat.id, "–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.")
        return

    user_pet = db.get_pet(user['id'])

    if user_pet and user_pet['is_alive']:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∂–∏–≤–æ–π –ø–∏—Ç–æ–º–µ—Ü! –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–≥–æ, –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–æ–ª–∂–µ–Ω —É–º–µ—Ä–µ—Ç—å.")
        return

    if user['balance'] < NEW_PET_COST:
        bot.send_message(message.chat.id, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Tamacoin –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞. –í–∞–º –Ω—É–∂–Ω–æ *{NEW_PET_COST} Tamacoin*. –í–∞—à –±–∞–ª–∞–Ω—Å: *{user['balance']}*.", parse_mode='Markdown')
        return

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä –ø–∏—Ç–æ–º—Ü–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
    markup = types.InlineKeyboardMarkup(row_width=1)
    for pet_key, pet_info in PET_TYPES.items():
        markup.add(types.InlineKeyboardButton(pet_info['name'], callback_data=f'confirm_buy_pet_{pet_key}'))
    
    bot.send_message(message.chat.id, f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –∑–∞ *{NEW_PET_COST} Tamacoin*. –í–∞—à –±–∞–ª–∞–Ω—Å: *{user['balance']} Tamacoin*.\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–∏—Ç–æ–º—Ü–∞:",
                     reply_markup=markup, parse_mode='Markdown')


@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_buy_pet_'))
def callback_confirm_buy_pet(call):
    chat_id = call.message.chat.id
    user_telegram_id = call.from_user.id
    message_id = call.message.message_id
    
    user = db.get_user(user_telegram_id)
    if not user:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        bot.edit_message_text(chat_id=chat_id, message_id=message_id, text="–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.", reply_markup=None)
        return

    user_pet = db.get_pet(user['id'])
    if user_pet and user_pet['is_alive']:
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∂–∏–≤–æ–π –ø–∏—Ç–æ–º–µ—Ü!")
        bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                              text="–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–∏—Ç–æ–º–µ—Ü. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status.", reply_markup=None)
        return

    if user['balance'] < NEW_PET_COST:
        bot.answer_callback_query(call.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Tamacoin –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞.")
        bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                              text=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Tamacoin –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞. –í–∞–º –Ω—É–∂–Ω–æ *{NEW_PET_COST} Tamacoin*. –í–∞—à –±–∞–ª–∞–Ω—Å: *{user['balance']}*.",
                              parse_mode='Markdown', reply_markup=None)
        return

    pet_type_key = call.data.replace('confirm_buy_pet_', '')
    if pet_type_key not in PET_TYPES:
        bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–∏—Ç–æ–º—Ü–∞.")
        return

    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
    db.update_user_balance(user_telegram_id, -NEW_PET_COST)
    updated_balance = db.get_user(user_telegram_id)['balance']

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
    pet_name = PET_TYPES[pet_type_key]['name']
    new_pet = db.create_pet(user['id'], pet_type_key, pet_name)

    bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                          text=f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∫—É–ø–∏–ª–∏ –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞: *{pet_name}* –∑–∞ {NEW_PET_COST} Tamacoin! –í–∞—à –±–∞–ª–∞–Ω—Å: *{updated_balance} Tamacoin*.",
                          parse_mode='Markdown', reply_markup=None)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
    status_text, pet_image_path = get_pet_status_and_image(user['id'], new_pet)
    status_text += f"\n\n–ë–∞–ª–∞–Ω—Å Tamacoin: `{updated_balance}ü™ô`"

    if pet_image_path:
        try:
            with open(pet_image_path, 'rb') as photo:
                bot.send_photo(chat_id, photo, caption=status_text, parse_mode='Markdown')
        except FileNotFoundError:
            bot.send_message(chat_id, status_text + f"\n\n_–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å: {pet_image_path}_", parse_mode='Markdown')
    else:
        bot.send_message(chat_id, status_text, parse_mode='Markdown')

    bot.answer_callback_query(call.id, "–ü–∏—Ç–æ–º–µ—Ü –∫—É–ø–ª–µ–Ω!")


# --- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ---
@bot.message_handler(commands=['admin_stats'])
def admin_stats(message):
    if message.from_user.id != ADMIN_TELEGRAM_ID:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    total_users = db.get_total_users()
    total_pets_alive = db.get_total_users_with_pets()
    total_tamacoin_distributed = db.get_total_tamacoin_distributed()
    
    stats_text = (
        f"*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã Tamacoin Game:*\n\n"
        f"–í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *{total_users}*\n"
        f"–ñ–∏–≤—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤: *{total_pets_alive}*\n"
        f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ Tamacoin: *{total_tamacoin_distributed} –∏–∑ {TOTAL_INITIAL_SUPPLY}*\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å Tamacoin –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: *{TOTAL_INITIAL_SUPPLY - total_tamacoin_distributed}*"
    )
    bot.send_message(message.chat.id, stats_text, parse_mode='Markdown')


# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤ Render.com ---
@app.route('/' + BOT_TOKEN, methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return '', 200
    else:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ content-type
        return '', 403 # Forbidden


if __name__ == '__main__':
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    db.init_db()
    
    # –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞
    # Render.com –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ—Ä—Ç —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è PORT
    port = int(os.environ.get("PORT", 5000))
    app.run(host='0.0.0.0', port=port)

