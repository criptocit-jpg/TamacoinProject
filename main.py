import os
import telebot
from telebot import types
import datetime
import time
from flask import Flask, request

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è - —ç—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–∫—Ä–∏–ø—Ç–∞
script_dir = os.path.dirname(os.path.abspath(__file__))
os.chdir(script_dir)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ db_manager.py –∏ pet_config.py –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
from db_manager import db
from pet_config import (
    PET_TYPES, PET_IMAGES,
    WELCOME_BONUS_AMOUNT, WELCOME_BONUS_ACTIONS_REQUIRED,
    DAILY_BONUS_AMOUNT, DAILY_BONUS_INTERVAL_HOURS,
    FOOD_COST, MEDICINE_COST, NEW_PET_COST,
    FEED_REWARD, PLAY_REWARD, CLEAN_REWARD,
    ACTION_COOLDOWN_HOURS,
    HUNGER_DECAY_PER_HOUR, HAPPINESS_DECAY_PER_HOUR, HEALTH_DECAY_PER_HOUR,
    HUNGER_THRESHOLD_SAD, HAPPINESS_THRESHOLD_SAD, HEALTH_THRESHOLD_SICK,
    INFO_TEXT, HELP_TEXT, TOTAL_INITIAL_SUPPLY, ADMIN_TELEGRAM_ID
)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –∏ –≤–µ–±—Ö—É–∫–æ–≤ ---
# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if BOT_TOKEN is None:
    raise ValueError("TELEGRAM_BOT_TOKEN environment variable not set. Please set it on Render.com")

bot = telebot.TeleBot(BOT_TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Flask –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤
app = Flask(__name__)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ UTC –∏ —Ñ–æ—Ä–º–∞—Ç–µ ISO
def get_current_iso_time():
    return datetime.datetime.now(datetime.timezone.utc).isoformat()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ISO —Å—Ç—Ä–æ–∫–∏ –≤ datetime –æ–±—ä–µ–∫—Ç
def parse_iso_time(iso_str):
    if iso_str:
        return datetime.datetime.fromisoformat(iso_str)
    return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞ (–≥–æ–ª–æ–¥, —Å—á–∞—Å—Ç—å–µ, –∑–¥–æ—Ä–æ–≤—å–µ)
def update_pet_stats(pet_data):
    if not pet_data or not pet_data['is_alive']:
        return pet_data

    last_update_time = parse_iso_time(pet_data['last_state_update'])
    if not last_update_time: # –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ
        pet_data['last_state_update'] = get_current_iso_time()
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        db.update_pet_state(pet_data['owner_id'], pet_data['hunger'], pet_data['happiness'], pet_data['health'], pet_data['last_state_update'])
        return pet_data

    current_time = datetime.datetime.now(datetime.timezone.utc)
    time_diff_hours = (current_time - last_update_time).total_seconds() / 3600

    if time_diff_hours > 0:
        pet_data['hunger'] = max(0.0, pet_data['hunger'] - (HUNGER_DECAY_PER_HOUR * time_diff_hours))
        pet_data['happiness'] = max(0.0, pet_data['happiness'] - (HAPPINESS_DECAY_PER_HOUR * time_diff_hours))
        pet_data['health'] = max(0.0, pet_data['health'] - (HEALTH_DECAY_PER_HOUR * time_diff_hours))
        
        # –£—Ö—É–¥—à–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏ –Ω–∏–∑–∫–æ–º –≥–æ–ª–æ–¥–µ/—Å—á–∞—Å—Ç—å–µ
        if pet_data['hunger'] < HUNGER_THRESHOLD_SAD:
            pet_data['health'] = max(0.0, pet_data['health'] - (HEALTH_DECAY_PER_HOUR * time_diff_hours * 0.5))
        if pet_data['happiness'] < HAPPINESS_THRESHOLD_SAD:
            pet_data['health'] = max(0.0, pet_data['health'] - (HEALTH_DECAY_PER_HOUR * time_diff_hours * 0.5))
        
        pet_data['last_state_update'] = get_current_iso_time()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–µ—Ä—Ç—å
        if pet_data['hunger'] <= 0 or pet_data['happiness'] <= 0 or pet_data['health'] <= 0:
            if pet_data['is_alive']:
                db.kill_pet(pet_data['owner_id'])
                pet_data['is_alive'] = 0
                user = db.get_user_by_db_id(pet_data['owner_id'])
                if user:
                    bot.send_message(user['telegram_id'],
                                     f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –ø–∏—Ç–æ–º–µ—Ü *{pet_data['name']}* —É–º–µ—Ä üòî. "
                                     f"–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –∑–∞ {NEW_PET_COST} Tamacoin —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /buy_pet.",
                                     parse_mode='Markdown')
            
        db.update_pet_state(pet_data['owner_id'], pet_data['hunger'], pet_data['happiness'], pet_data['health'], pet_data['last_state_update'])
    
    return pet_data

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –ø–∏—Ç–æ–º—Ü–∞ –∏ –µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def get_pet_status_and_image(user_id, pet_data):
    pet_data = update_pet_stats(pet_data)

    if not pet_data or not pet_data['is_alive']:
        return "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞ –∏–ª–∏ –æ–Ω –º–µ—Ä—Ç–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –∑–∞–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–≥–æ –∏–ª–∏ /buy_pet, —á—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏.", PET_IMAGES.get('dead_pet')

    status_text = f"–í–∞—à –ø–∏—Ç–æ–º–µ—Ü: *{pet_data['name']}* ({PET_TYPES[pet_data['pet_type']]['name']})\n\n"
    status_text += f"–ì–æ–ª–æ–¥: `{pet_data['hunger']:.1f}%`\n"
    status_text += f"–°—á–∞—Å—Ç—å–µ: `{pet_data['happiness']:.1f}%`\n"
    status_text += f"–ó–¥–æ—Ä–æ–≤—å–µ: `{pet_data['health']:.1f}%`\n"

    image_key = pet_data['pet_type']
    
    if pet_data['hunger'] < HUNGER_THRESHOLD_SAD or \
       pet_data['happiness'] < HAPPINESS_THRESHOLD_SAD or \
       pet_data['health'] < HEALTH_THRESHOLD_SICK:
        
        if PET_IMAGES.get(pet_data['pet_type'] + '_hungry'):
            image_key = pet_data['pet_type'] + '_hungry'

    if pet_data['health'] < HEALTH_THRESHOLD_SICK and PET_IMAGES.get(pet_data['pet_type'] + '_sick'):
        image_key = pet_data['pet_type'] + '_sick'


    if PET_IMAGES.get(image_key):
        return status_text, PET_IMAGES[image_key]
    else:
        return status_text, list(PET_IMAGES.values())[0] if PET_IMAGES else None


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è
def is_action_on_cooldown(last_action_time_str):
    if last_action_time_str:
        last_action_time = parse_iso_time(last_action_time_str)
        current_time = datetime.datetime.now(datetime.timezone.utc)
        time_diff_hours = (current_time - last_action_time).total_seconds() / 3600
        return time_diff_hours < ACTION_COOLDOWN_HOURS
    return False

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user = db.get_user(message.from_user.id)
    if not user:
        user = db.create_user(message.from_user.id, message.from_user.username)

    user_pet = db.get_pet(user['id'])

    if user_pet and user_pet['is_alive']:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–∏—Ç–æ–º–µ—Ü! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–ª–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
        return

    markup = types.InlineKeyboardMarkup(row_width=1)
    itembtn1 = types.InlineKeyboardButton(PET_TYPES['toothless']['name'], callback_data='choose_pet_toothless')
    itembtn2 = types.InlineKeyboardButton(PET_TYPES['light_fury']['name'], callback_data='choose_pet_light_fury')
    itembtn3 = types.InlineKeyboardButton(PET_TYPES['stormfly']['name'], callback_data='choose_pet_stormfly')
    markup.add(itembtn1, itembtn2, itembtn3)

    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞:", reply_markup=markup)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–µ–≤
    for pet_key, pet_info in PET_TYPES.items():
        if PET_IMAGES.get(pet_key):
            try:
                with open(PET_IMAGES[pet_key], 'rb') as photo:
                    bot.send_photo(message.chat.id, photo, caption=pet_info['name'])
            except FileNotFoundError:
                bot.send_message(message.chat.id, f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è {pet_info['name']} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å: {PET_IMAGES[pet_key]}")
        else:
            bot.send_message(message.chat.id, f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è {pet_info['name']} –Ω–µ —É–∫–∞–∑–∞–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")


@bot.message_handler(commands=['status', 'profile'])
def show_status(message):
    user = db.get_user(message.from_user.id)
    if not user or not user['pet_id']:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –∑–∞–≤–µ—Å—Ç–∏ –µ–≥–æ!")
        return

    pet_data = db.get_pet(user['id'])
    
    if not pet_data:
        bot.send_message(message.chat.id, "–ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–∏—Ç–æ–º—Ü–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /start —Å–Ω–æ–≤–∞.")
        return

    status_text, pet_image_path = get_pet_status_and_image(user['id'], pet_data)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    status_text += f"\n\n–ë–∞–ª–∞–Ω—Å Tamacoin: `{user['balance']}ü™ô`"

    if pet_image_path:
        try:
            with open(pet_image_path, 'rb') as photo:
                bot.send_photo(message.chat.id, photo, caption=status_text, parse_mode='Markdown')
        except FileNotFoundError:
            bot.send_message(message.chat.id, status_text + f"\n\n_–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å: {pet_image_path}_", parse_mode='Markdown')
    else:
        bot.send_message(message.chat.id, status_text, parse_mode='Markdown')


@bot.message_handler(commands=['help'])
def send_help(message):
    bot.send_message(message.chat.id, HELP_TEXT, parse_mode='Markdown')

@bot.message_handler(commands=['info'])
def send_info(message):
    bot.send_message(message.chat.id, INFO_TEXT, parse_mode='Markdown')

@bot.message_handler(commands=['users_count'])
def send_users_count(message):
    count = db.get_total_users_with_pets()
    bot.send_message(message.chat.id, f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–≤—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤: *{count}*.", parse_mode='Markdown')

# --- –í—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–ü–ï–†–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø CALLBACK_QUERY) ---
@bot.callback_query_handler(func=lambda call: True)
def debug_all_callbacks(call):
    print(f"DEBUG_ALL_CALLBACKS: Received callback_data: '{call.data}' from user {call.from_user.id}")
    # –í–∞–∂–Ω–æ: –ù–ï –≤—ã–∑—ã–≤–∞–π—Ç–µ bot.answer_callback_query –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –µ–µ —É –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    # –∏ –Ω–µ –º–µ—à–∞—Ç—å –∏—Ö —Ä–∞–±–æ—Ç–µ. –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∏ —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ –æ—Ç–ª–∞–¥–∫–∏.


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –í–´–ë–û–†–ê –ü–ò–¢–û–ú–¶–ê ---
@bot.callback_query_handler(func=lambda call: call.data.startswith('choose_pet_'))
def callback_choose_pet(call):
    print(f"DEBUG: callback_choose_pet called for user {call.from_user.id} with data '{call.data}'")
    chat_id = call.message.chat.id
    user_telegram_id = call.from_user.id
    message_id = call.message.message_id
    
    try:
        user = db.get_user(user_telegram_id)
        print(f"DEBUG: User data retrieved: {user}")
        if not user:
            user = db.create_user(user_telegram_id, call.from_user.username)
            print(f"DEBUG: User created: {user}")

        user_pet = db.get_pet(user['id'])
        print(f"DEBUG: Pet data retrieved: {user_pet}")

        if user_pet and user_pet['is_alive']:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∂–∏–≤–æ–π –ø–∏—Ç–æ–º–µ—Ü!")
            bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                  text="–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–∏—Ç–æ–º–µ—Ü. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.",
                                  reply_markup=None)
            print("DEBUG: Already has a pet, returning.")
            return

        pet_type_key = call.data.replace('choose_pet_', '')
        print(f"DEBUG: Pet type key: {pet_type_key}")
        if pet_type_key not in PET_TYPES:
            bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–∏—Ç–æ–º—Ü–∞.")
            print("DEBUG: Unknown pet type, returning.")
            return

        # –ï—Å–ª–∏ –ø–∏—Ç–æ–º–µ—Ü –º–µ—Ä—Ç–≤ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
        pet_name = PET_TYPES[pet_type_key]['name'] # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–º—è —Ç–∏–ø–∞ –∫–∞–∫ –∏–º—è –ø–∏—Ç–æ–º—Ü–∞
        new_pet = db.create_pet(user['id'], pet_type_key, pet_name)
        print(f"DEBUG: New pet created: {new_pet}")
        
        bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                              text=f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–∏—Ç–æ–º—Ü–∞: *{pet_name}*!",
                              parse_mode='Markdown', reply_markup=None)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–∏—Ç–æ–º—Ü–∞
        status_text, pet_image_path = get_pet_status_and_image(user['id'], new_pet)
        status_text += f"\n\n–ë–∞–ª–∞–Ω—Å Tamacoin: `{user['balance']}ü™ô`" # –ü–æ–∫–∞ 0

        if pet_image_path:
            try:
                with open(pet_image_path, 'rb') as photo:
                    bot.send_photo(chat_id, photo, caption=status_text, parse_mode='Markdown')
            except FileNotFoundError:
                bot.send_message(chat_id, status_text + f"\n\n_–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å: {pet_image_path}_", parse_mode='Markdown')
        else:
            bot.send_message(chat_id, status_text, parse_mode='Markdown')
        
        bot.send_message(chat_id, "–¢–µ–ø–µ—Ä—å –Ω–∞—á–Ω–∏—Ç–µ —É—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ –Ω–∏–º! –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ —Å–æ–≤–µ—Ä—à–∏—Ç—å 5 –¥–µ–π—Å—Ç–≤–∏–π, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å.")
        
        bot.answer_callback_query(call.id, "–ü–∏—Ç–æ–º–µ—Ü –≤—ã–±—Ä–∞–Ω!") # –î–æ–±–∞–≤–∏–ª –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–æ–ø–∫–∏

    except Exception as e:
        print(f"ERROR: An unhandled exception occurred in callback_choose_pet: {e}")
        import traceback
        traceback.print_exc() # –í—ã–≤–µ–¥–µ—Ç –ø–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤ –≤ –ª–æ–≥–∏
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –û—à–∏–±–∫–∞: `{e}`", parse_mode='Markdown')
        return

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –ú–ê–ì–ê–ó–ò–ù–ê ---
@bot.callback_query_handler(func=lambda call: call.data.startswith('buy_item_'))
def callback_buy_item(call):
    chat_id = call.message.chat.id
    user_telegram_id = call.from_user.id
    message_id = call.message.message_id

    user = db.get_user(user_telegram_id)
    if not user:
        bot.answer_callback_query(call.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                              text="–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", reply_markup=None)
        return

    item_type = call.data.replace('buy_item_', '')
    cost = 0
    item_name = ""
    
    if item_type == 'food':
        cost = FOOD_COST
        item_name = "–ï–¥–∞"
    elif item_type == 'medicine':
        cost = MEDICINE_COST
        item_name = "–õ–µ–∫–∞—Ä—Å—Ç–≤–æ"
    else:
        bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä.")
        return

    if user['balance'] < cost:
        bot.answer_callback_query(call.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Tamacoin!")
        bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                              text=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Tamacoin –¥–ª—è –ø–æ–∫—É–ø–∫–∏ *{item_name}*. –í–∞—à –±–∞–ª–∞–Ω—Å: *{user['balance']}*.",
                              parse_mode='Markdown', reply_markup=None)
        return

    # –°–ø–∏—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã
    db.update_user_balance(user_telegram_id, -cost)
    updated_balance = db.get_user(user_telegram_id)['balance']

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞ –ø–∏—Ç–æ–º—Ü–∞ (–µ—Å–ª–∏ –∂–∏–≤)
    pet_data = db.get_pet(user['id'])
    if pet_data and pet_data['is_alive']:
        pet_data = update_pet_stats(pet_data)
        if item_type == 'food':
            pet_data['hunger'] = min(100.0, pet_data['hunger'] + 30.0)
            bot.answer_callback_query(call.id, f"–í—ã –∫—É–ø–∏–ª–∏ –µ–¥—É! –ì–æ–ª–æ–¥ –ø–∏—Ç–æ–º—Ü–∞ —É–≤–µ–ª–∏—á–µ–Ω.")
        elif item_type == 'medicine':
            pet_data['health'] = min(100.0, pet_data['health'] + 40.0)
            bot.answer_callback_query(call.id, f"–í—ã –∫—É–ø–∏–ª–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ! –ó–¥–æ—Ä–æ–≤—å–µ –ø–∏—Ç–æ–º—Ü–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
        
        db.update_pet_state(user['id'], pet_data['hunger'], pet_data['happiness'], pet_data['health'], pet_data['last_state_update'])
        
        bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                              text=f"–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ *{item_name}*! –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: *{updated_balance} Tamacoin*.\n"
                                   f"–ì–æ–ª–æ–¥: `{pet_data['hunger']:.1f}%`, –ó–¥–æ—Ä–æ–≤—å–µ: `{pet_data['health']:.1f}%`",
                              parse_mode='Markdown', reply_markup=None)
    else:
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞, —á—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä.")
        bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                              text=f"–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ *{item_name}*! –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: *{updated_balance} Tamacoin*.\n"
                                   f"–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞, —á—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä. –û–Ω –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –Ω–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É (—Ö–æ—Ç—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤).",
                              parse_mode='Markdown', reply_markup=None)

@bot.message_handler(commands=['buy_pet'])
def buy_new_pet(message):
    user_telegram_id = message.from_user.id
    user = db.get_user(user_telegram_id)

    if not user:
        bot.send_message(message.chat.id, "–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.")
        return

    pet_data = db.get_pet(user['id'])
    if pet_data and pet_data['is_alive']:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∂–∏–≤–æ–π –ø–∏—Ç–æ–º–µ—Ü! –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–≥–æ.")
        return

    if user['balance'] < NEW_PET_COST:
        bot.send_message(message.chat.id, f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Tamacoin –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞. –°—Ç–æ–∏–º–æ—Å—Ç—å: *{NEW_PET_COST} Tamacoin*. –í–∞—à –±–∞–ª–∞–Ω—Å: *{user['balance']}*.", parse_mode='Markdown')
        return

    markup = types.InlineKeyboardMarkup(row_width=1)
    itembtn1 = types.InlineKeyboardButton(PET_TYPES['toothless']['name'], callback_data='buy_pet_toothless')
    itembtn2 = types.InlineKeyboardButton(PET_TYPES['light_fury']['name'], callback_data='buy_pet_light_fury')
    itembtn3 = types.InlineKeyboardButton(PET_TYPES['stormfly']['name'], callback_data='buy_pet_stormfly')
    markup.add(itembtn1, itembtn2, itembtn3)

    bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –∑–∞ {NEW_PET_COST} Tamacoin. –í–∞—à –±–∞–ª–∞–Ω—Å: *{user['balance']} Tamacoin*.",
                     reply_markup=markup, parse_mode='Markdown')

@bot.callback_query_handler(func=lambda call: call.data.startswith('buy_pet_'))
def callback_buy_new_pet(call):
    chat_id = call.message.chat.id
    user_telegram_id = call.from_user.id
    message_id = call.message.message_id
    
    user = db.get_user(user_telegram_id)
    if not user:
        bot.answer_callback_query(call.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                              text="–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", reply_markup=None)
        return

    pet_data = db.get_pet(user['id'])
    if pet_data and pet_data['is_alive']:
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∂–∏–≤–æ–π –ø–∏—Ç–æ–º–µ—Ü!")
        bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                              text="–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∂–∏–≤–æ–π –ø–∏—Ç–æ–º–µ—Ü.", reply_markup=None)
        return

    if user['balance'] < NEW_PET_COST:
        bot.answer_callback_query(call.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Tamacoin!")
        bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                              text=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Tamacoin –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞. –í–∞—à –±–∞–ª–∞–Ω—Å: *{user['balance']}*.",
                              parse_mode='Markdown', reply_markup=None)
        return

    pet_type_key = call.data.replace('buy_pet_', '')
    if pet_type_key not in PET_TYPES:
        bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–∏—Ç–æ–º—Ü–∞.")
        return

    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
    db.update_user_balance(user_telegram_id, -NEW_PET_COST)

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
    pet_name = PET_TYPES[pet_type_key]['name']
    new_pet = db.create_pet(user['id'], pet_type_key, pet_name)
    
    updated_balance = db.get_user(user_telegram_id)['balance']

    bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                          text=f"–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –ø–∏—Ç–æ–º—Ü–∞: *{pet_name}*! –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: *{updated_balance} Tamacoin*.",
                          parse_mode='Markdown', reply_markup=None)
    
    status_text, pet_image_path = get_pet_status_and_image(user['id'], new_pet)
    status_text += f"\n\n–ë–∞–ª–∞–Ω—Å Tamacoin: `{updated_balance}ü™ô`"

    if pet_image_path:
        try:
            with open(pet_image_path, 'rb') as photo:
                bot.send_photo(chat_id, photo, caption=status_text, parse_mode='Markdown')
        except FileNotFoundError:
            bot.send_message(chat_id, status_text + f"\n\n_–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å: {pet_image_path}_", parse_mode='Markdown')
    else:
        bot.send_message(chat_id, status_text, parse_mode='Markdown')
    
    bot.send_message(chat_id, "–ù–∞—á–Ω–∏—Ç–µ —É—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ –Ω–∏–º! –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ —Å–æ–≤–µ—Ä—à–∏—Ç—å 5 –¥–µ–π—Å—Ç–≤–∏–π, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å (–µ—Å–ª–∏ –≤—ã –µ–≥–æ –µ—â—ë –Ω–µ –ø–æ–ª—É—á–∞–ª–∏).")


# --- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–¥–ª—è –∞–¥–º–∏–Ω–∞) ---
@bot.message_handler(commands=['admin_get_balance'])
def admin_get_balance(message):
    if message.from_user.id != ADMIN_TELEGRAM_ID:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    parts = message.text.split()
    if len(parts) != 2:
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_get_balance <telegram_id_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>")
        return
    
    try:
        target_telegram_id = int(parts[1])
    except ValueError:
        bot.send_message(message.chat.id, "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    user = db.get_user(target_telegram_id)
    if user:
        bot.send_message(message.chat.id, f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_telegram_id}: *{user['balance']} Tamacoin*.", parse_mode='Markdown')
    else:
        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@bot.message_handler(commands=['admin_add_balance'])
def admin_add_balance(message):
    if message.from_user.id != ADMIN_TELEGRAM_ID:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    parts = message.text.split()
    if len(parts) != 3:
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_add_balance <telegram_id_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> <—Å—É–º–º–∞>")
        return
    
    try:
        target_telegram_id = int(parts[1])
        amount = int(parts[2])
    except ValueError:
        bot.send_message(message.chat.id, "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
        return

    user = db.get_user(target_telegram_id)
    if user:
        db.update_user_balance(target_telegram_id, amount)
        updated_balance = db.get_user(target_telegram_id)['balance']
        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_telegram_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ {amount} Tamacoin. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: *{updated_balance} Tamacoin*.", parse_mode='Markdown')
    else:
        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@bot.message_handler(commands=['admin_total_supply'])
def admin_total_supply(message):
    if message.from_user.id != ADMIN_TELEGRAM_ID:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    total_distributed = db.get_total_distributed_coins()
    bot.send_message(message.chat.id, f"–û–±—â–∏–π –æ–±—ä–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç (Total Supply): *{total_distributed}* –∏–∑ *{TOTAL_INITIAL_SUPPLY}*.", parse_mode='Markdown')


# --- –í–µ–±—Ö—É–∫ ---
# –≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Flask, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
@app.route(f'/{BOT_TOKEN}', methods=['POST'])
def webhook():
    json_string = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_string)
    bot.process_new_updates([update])
    return '!', 200 # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200 OK –¥–ª—è Telegram

# –ó–∞–ø—É—Å–∫ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤)
if __name__ == '__main__':
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
