import os
import logging
from telegram import Update, InputFile, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters
from datetime import datetime, timedelta

from db_manager import DBManager # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å DBManager
import pet_config # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç PET_TYPES_DISPLAY, PET_IDS, PET_IMAGES
from game_logic import PetGame # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å PetGame

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏ —Ö–æ—Å—Ç–∞ –≤–µ–±—Ö—É–∫–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")

if not TOKEN or not WEBHOOK_HOST:
    logger.error("API_TOKEN or WEBHOOK_HOST environment variable not set.")
    raise ValueError("API_TOKEN or WEBHOOK_HOST environment variable not set.")

PORT = int(os.environ.get('PORT', 10000))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DBManager (—Å–∏–Ω–≥–ª—Ç–æ–Ω)
db_manager = DBManager()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PetGame —Å —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º DBManager. –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –≤ –º–µ—Ç–æ–¥—ã PetGame.
game_instance = PetGame(db_manager)

# --- –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
START_MESSAGE = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Tamacoin Game! –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞:"
SELECT_PET_MESSAGE = "–ö–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Å—Ç–∏?"
SHOP_CLOSED_MESSAGE = "–ú–∞–≥–∞–∑–∏–Ω –ø–æ–∫–∞ –∑–∞–∫—Ä—ã—Ç –Ω–∞ —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é. –ó–∞—Ö–æ–¥–∏—Ç–µ –ø–æ–∑–∂–µ!"
DAILY_BONUS_UNAVAILABLE = "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Å–∫–æ—Ä–æ! (–õ–æ–≥–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞)"
INFO_TEXT = """
**TAMACOIN Game - –ò–≥—Ä–∞–π, —Ä–∞–∑–≤–∏–≤–∞–π, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π!**

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä Tamacoin, –≥–¥–µ —Ç—ã –º–æ–∂–µ—à—å –∑–∞–≤–µ—Å—Ç–∏ —Å–≤–æ–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –∏ –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ –Ω—ë–º! –¢–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è –≤–ª–∏—è—é—Ç –Ω–∞ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –∑–¥–æ—Ä–æ–≤—å–µ –∏ –≥–æ–ª–æ–¥.

**üéÆ –ì–µ–π–º–ø–ª–µ–π:**
* **–ó–∞–±–æ—Ç—å—Å—è –æ –ø–∏—Ç–æ–º—Ü–µ:** –ö–æ—Ä–º–∏ –µ–≥–æ, –∏–≥—Ä–∞–π —Å –Ω–∏–º, —É–±–∏—Ä–∞–π –∑–∞ –Ω–∏–º. –û—Ç —ç—Ç–æ–≥–æ –∑–∞–≤–∏—Å–∏—Ç –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
* **–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π Tamacoin:** –í—ã–ø–æ–ª–Ω—è–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è, —É—á–∞—Å—Ç–≤—É–π –≤ –º–∏–Ω–∏-–∏–≥—Ä–∞—Ö (—Å–∫–æ—Ä–æ!), —Ç–æ—Ä–≥—É–π –Ω–∞ —Ä—ã–Ω–∫–µ (—Å–∫–æ—Ä–æ!).
* **–†–∞–∑–≤–∏–≤–∞–π—Å—è:** –ü–æ–∫—É–ø–∞–π —É–ª—É—á—à–µ–Ω–∏—è –∏ –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ.

**üí∞ –ß—Ç–æ —Ç–∞–∫–æ–µ Tamacoin (Jetton –Ω–∞ TON)?**
Tamacoin - —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∏–≥—Ä–æ–≤–∞—è –≤–∞–ª—é—Ç–∞, —ç—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∏–π **Jetton –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–µ TON**! –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤—Å–µ —Ç–≤–æ–∏ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã - —ç—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–µ –∞–∫—Ç–∏–≤—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–Ω–µ –∏–≥—Ä—ã. –ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è –∫ –ø–æ–ª–Ω–æ–π –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏!

**üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:**
–ò–≥—Ä–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ –ø–µ—Ä–µ–¥–æ–≤—ã—Ö –±–ª–æ–∫—á–µ–π–Ω-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö TON, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π. –¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –∞–∫—Ç–∏–≤—ã –Ω–∞–¥–µ–∂–Ω–æ –∑–∞—â–∏—â–µ–Ω—ã.

**üöÄ –ë—É–¥—É—â–µ–µ –∏–≥—Ä—ã:**
–ú—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞:
* –ú–∏–Ω–∏-–∏–≥—Ä—ã –∏ –∫–≤–µ—Å—Ç—ã
* –¢–æ—Ä–≥–æ–≤–∞—è –ø–ª–æ—â–∞–¥–∫–∞ –¥–ª—è –ø–∏—Ç–æ–º—Ü–µ–≤ –∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
* –°–∏—Å—Ç–µ–º–∞ –æ–±–º–µ–Ω–∞ Tamacoin –Ω–∞ –¥—Ä—É–≥–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
* –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ä–µ–π—Ç–∏–Ω–≥–∏

–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É –∏ —Å—Ç–∞–Ω—å —á–∞—Å—Ç—å—é –±—É–¥—É—â–µ–≥–æ Tamacoin!
"""


# --- –§—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

async def start_command(update: Update, context):
    telegram_id = update.effective_user.id
    username = update.effective_user.username
    first_name = update.effective_user.first_name
    last_name = update.effective_user.last_name

    user = db_manager.get_user(telegram_id)
    if user is None:
        internal_user_id = db_manager.add_user(telegram_id, username, first_name, last_name)
        logger.info(f"New user registered: {telegram_id}")
    else:
        internal_user_id = user[0] # –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info(f"User {telegram_id} already exists. Checking for pet.")

    pet = db_manager.get_pet(internal_user_id)
    if pet is None:
        keyboard = [
            [InlineKeyboardButton(pet_config.PET_TYPES_DISPLAY[pet_id], callback_data=f"select_pet_{pet_id}")
             for pet_id in pet_config.PET_IDS] # –ò—Å–ø–æ–ª—å–∑—É–µ–º PET_IDS –¥–ª—è callback_data –∏ PET_TYPES_DISPLAY –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(START_MESSAGE, reply_markup=reply_markup)
        await update.message.reply_text(SELECT_PET_MESSAGE)
    else:
        await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ! –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–∏—Ç–æ–º–µ—Ü.")
        await game_instance.send_pet_status(update.effective_chat.id, internal_user_id, context.bot)

async def button_callback_handler(update: Update, context):
    query = update.callback_query
    await query.answer() # –í–∞–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback_query, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Å—Ç–∞–ª–∞ –º–∏–≥–∞—Ç—å
    
    telegram_id = query.from_user.id
    
    user_record = db_manager.get_user(telegram_id)
    if user_record:
        internal_user_id = user_record[0]
    else:
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å /start.")
        return

    data = query.data
    if data.startswith("select_pet_"):
        pet_id_from_callback = data.split("_")[2] # –≠—Ç–æ –±—É–¥–µ—Ç 'toothless', 'light_fury' –∏ —Ç.–¥.
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ pet_id_from_callback —è–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–∏–º –∏–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö ID –ø–∏—Ç–æ–º—Ü–µ–≤
        if pet_id_from_callback not in pet_config.PET_IDS:
            await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–∏—Ç–æ–º—Ü–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
            return

        pet_type_for_db = pet_id_from_callback # –î–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º ID ('toothless')
        pet_display_name = pet_config.PET_TYPES_DISPLAY.get(pet_id_from_callback) # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–æ–µ –∏–º—è
        
        existing_pet = db_manager.get_pet(internal_user_id)
        if existing_pet:
            await query.edit_message_text(f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–∏—Ç–æ–º–µ—Ü: {existing_pet[3]} ({existing_pet[2]}).")
            await game_instance.send_pet_status(query.message.chat_id, internal_user_id, context.bot)
            return

        success = db_manager.create_pet(internal_user_id, pet_type_for_db, pet_display_name)
        if success:
            await query.edit_message_text(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ–ª–∏ –ø–∏—Ç–æ–º—Ü–∞: {pet_display_name} ({pet_type_for_db}).")
            
            image_path = pet_config.PET_IMAGES.get(pet_type_for_db + "_normal") # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–∏—Ç–æ–º—Ü–∞ + "_normal" –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if image_path and os.path.exists(image_path):
                with open(image_path, 'rb') as image_file:
                    await context.bot.send_photo(chat_id=query.message.chat_id, photo=InputFile(image_file), caption=f"{pet_display_name} ({pet_type_for_db})")
            else:
                await context.bot.send_message(chat_id=query.message.chat_id, text=f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è {pet_display_name} ({pet_type_for_db}) –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª {pet_type_for_db}_normal.png —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

            await game_instance.send_pet_status(query.message.chat_id, internal_user_id, context.bot)
        else:
            await query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Å—Ç–∏ –ø–∏—Ç–æ–º—Ü–∞. –í–æ–∑–º–æ–∂–Ω–æ, —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–∏—Ç–æ–º–µ—Ü –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

async def status_command(update: Update, context):
    telegram_id = update.effective_user.id
    user = db_manager.get_user(telegram_id)
    if user is None:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    internal_user_id = user[0]
    pet = db_manager.get_pet(internal_user_id)
    if pet is None:
        await update.message.reply_text("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞! –í—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start.")
    else:
        await game_instance.send_pet_status(update.effective_chat.id, internal_user_id, context.bot)

async def feed_command(update: Update, context):
    telegram_id = update.effective_user.id
    user = db_manager.get_user(telegram_id)
    if user is None:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    internal_user_id = user[0]
    pet = db_manager.get_pet(internal_user_id)
    if pet is None:
        await update.message.reply_text("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞! –í—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start.")
    else:
        await game_instance.feed_pet(update.effective_chat.id, internal_user_id, context.bot)

async def play_command(update: Update, context):
    telegram_id = update.effective_user.id
    user = db_manager.get_user(telegram_id)
    if user is None:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    internal_user_id = user[0]
    pet = db_manager.get_pet(internal_user_id)
    if pet is None:
        await update.message.reply_text("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞! –í—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start.")
    else:
        await game_instance.play_with_pet(update.effective_chat.id, internal_user_id, context.bot)

async def clean_command(update: Update, context):
    telegram_id = update.effective_user.id
    user = db_manager.get_user(telegram_id)
    if user is None:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    internal_user_id = user[0]
    pet = db_manager.get_pet(internal_user_id)
    if pet is None:
        await update.message.reply_text("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞! –í—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start.")
    else:
        await game_instance.clean_pet_area(update.effective_chat.id, internal_user_id, context.bot)

async def shop_command(update: Update, context):
    await update.message.reply_text(SHOP_CLOSED_MESSAGE)

async def daily_bonus_command(update: Update, context):
    await update.message.reply_text(DAILY_BONUS_UNAVAILABLE)

async def info_command(update: Update, context):
    await update.message.reply_text(INFO_TEXT, parse_mode='Markdown')

async def users_count_command(update: Update, context):
    count = db_manager.get_total_users_count()
    await update.message.reply_text(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}.")

async def admin_stats_command(update: Update, context):
    # !!! –í–∞–∂–Ω–æ: –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ !!!
    # –ù–∞–ø—Ä–∏–º–µ—Ä: if update.effective_user.id != YOUR_ADMIN_TELEGRAM_ID: return
    
    stats = db_manager.get_game_stats()
    if stats:
        await update.message.reply_text(
            f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"–í—Å–µ–≥–æ —ç–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–æ Tamacoin: {stats.get('total_emitted_tamacoin', 0)}\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}"
        )
    else:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

async def echo(update: Update, context):
    await update.message.reply_text("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")


def main():
    application = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("status", status_command))
    application.add_handler(CommandHandler("feed", feed_command))
    application.add_handler(CommandHandler("play", play_command))
    application.add_handler(CommandHandler("clean", clean_command))
    application.add_handler(CommandHandler("shop", shop_command))
    application.add_handler(CommandHandler("daily_bonus", daily_bonus_command))
    application.add_handler(CommandHandler("info", info_command))
    application.add_handler(CommandHandler("users_count", users_count_command))
    application.add_handler(CommandHandler("admin_stats", admin_stats_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_callback_handler))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞ Render —Å –≤–µ–±—Ö—É–∫–∞–º–∏
    application.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TOKEN,
        webhook_url=WEBHOOK_HOST + '/' + TOKEN
    )

if __name__ == "__main__":
    main()
