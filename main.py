# main.py

# ====================================================================
# –≠–¢–ê –°–¢–†–û–ö–ê –î–û–õ–ñ–ù–ê –ë–´–¢–¨ –°–ê–ú–û–ô –ü–ï–†–í–û–ô –í –§–ê–ô–õ–ï, –ü–ï–†–ï–î –í–°–ï–ú–ò –ò–ú–ü–û–†–¢–ê–ú–ò
print("!!!!! DEBUG_MAIN: main.py started execution !!!!!")
# ====================================================================

import os
import telebot
from telebot import types
import datetime
import math
from flask import Flask, request # Import Flask and request for webhook

# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ db_manager.py –∏ pet_config.py –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
# –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ/–∫–ª–∞—Å—Å—ã
from db_manager import db
from pet_config import (
    PET_TYPES, PET_IMAGES, INITIAL_TAMACIONS_BALANCE, WELCOME_BONUS_AMOUNT,
    WELCOME_BONUS_ACTIONS_REQUIRED, DAILY_BONUS_AMOUNT,
    DAILY_BONUS_INTERVAL_HOURS, FOOD_COST, MEDICINE_COST, NEW_PET_COST,
    FEED_REWARD, PLAY_REWARD, CLEAN_REWARD, ACTION_COOLDOWN_HOURS,
    HUNGER_DECAY_PER_HOUR, HAPPINESS_DECAY_PER_HOUR, HEALTH_DECAY_PER_HOUR,
    HUNGER_THRESHOLD_SAD, HAPPINESS_THRESHOLD_SAD, HEALTH_THRESHOLD_SICK,
    TOTAL_INITIAL_SUPPLY, ADMIN_TELEGRAM_ID, INFO_TEXT, HELP_TEXT
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞
API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST") # –ù–∞–ø—Ä–∏–º–µ—Ä, –≤–∞—à_–¥–æ–º–µ–Ω.onrender.com
WEBHOOK_URL = f"https://{WEBHOOK_HOST}/{API_TOKEN}"

bot = telebot.TeleBot(API_TOKEN)
app = Flask(__name__) # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
# –≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –ª—É—á—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
# –Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –∏—Ö –∑–¥–µ—Å—å.

def get_pet_status_and_image(pet):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
    –ù–∞ –æ—Å–Ω–æ–≤–µ –ª–æ–≥–∏–∫–∏ –∏–∑ pet_config –∏ —Ç–µ–∫—É—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–∏—Ç–æ–º—Ü–∞.
    """
    print(f"DEBUG_HELPER: get_pet_status_and_image called for pet {pet['id']}.")
    image_key = pet['pet_type'] + '_normal' # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    status_text = f"–ì–æ–ª–æ–¥: {pet['hunger']:.1f}%\n" \
                  f"–°—á–∞—Å—Ç—å–µ: {pet['happiness']:.1f}%\n" \
                  f"–ó–¥–æ—Ä–æ–≤—å–µ: {pet['health']:.1f}%"

    if pet['is_alive'] == 0:
        image_key = 'dead_pet'
        status_text = "–í–∞—à –ø–∏—Ç–æ–º–µ—Ü –º–µ—Ä—Ç–≤. üò¢"
    elif pet['hunger'] < HUNGER_THRESHOLD_SAD:
        image_key = pet['pet_type'] + '_hungry'
        status_text += "\n*–ü–∏—Ç–æ–º–µ—Ü –≥–æ–ª–æ–¥–µ–Ω!*"
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å—á–∞—Å—Ç—å—è, –∑–¥–æ—Ä–æ–≤—å—è –∏ –¥—Ä—É–≥–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    # elif pet['happiness'] < HAPPINESS_THRESHOLD_SAD:
    #     image_key = pet['pet_type'] + '_sad'
    #     status_text += "\n*–ü–∏—Ç–æ–º–µ—Ü –≥—Ä—É—Å—Ç–∏—Ç!*"
    # elif pet['health'] < HEALTH_THRESHOLD_SICK:
    #     image_key = pet['pet_type'] + '_sick'
    #     status_text += "\n*–ü–∏—Ç–æ–º–µ—Ü –±–æ–ª–µ–Ω!*"

    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PET_IMAGES —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á, –∏–Ω–∞—á–µ –≤–µ—Ä–Ω–∏—Ç–µ 'normal' –∏–ª–∏ 'dead_pet'
    image_path = PET_IMAGES.get(image_key, PET_IMAGES.get(pet['pet_type'] + '_normal', 'dead_pet'))
    print(f"DEBUG_HELPER: Image path determined: {image_path} for key {image_key}.")
    return status_text, image_path

def update_pet_stats_over_time(pet):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—à–µ–¥—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
    """
    print(f"DEBUG_HELPER: update_pet_stats_over_time called for pet {pet['id']}.")
    if pet['is_alive'] == 0:
        print(f"DEBUG_HELPER: Pet {pet['id']} is dead, no state update needed.")
        return pet # –ú–µ—Ä—Ç–≤—ã–π –ø–∏—Ç–æ–º–µ—Ü –Ω–µ "—Å—Ç–∞—Ä–µ–µ—Ç"

    last_update_time_str = pet.get('last_state_update')
    if not last_update_time_str:
        # –ï—Å–ª–∏ last_state_update –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–≤—ã–π –ø–∏—Ç–æ–º–µ—Ü), –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
        print(f"DEBUG_HELPER: last_state_update missing for pet {pet['id']}, initializing.")
        db.update_pet_state(pet['owner_id'], pet['hunger'], pet['happiness'], pet['health'], datetime.datetime.now(datetime.timezone.utc).isoformat())
        pet = db.get_pet(pet['owner_id']) # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–º –¥–∞–Ω–Ω—ã–µ –ø–∏—Ç–æ–º—Ü–∞
        last_update_time_str = pet['last_state_update'] # –¢–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å

    try:
        last_update_time = datetime.datetime.fromisoformat(last_update_time_str)
    except ValueError:
        print(f"ERROR_HELPER: Invalid last_state_update format '{last_update_time_str}' for pet {pet['id']}. Using current time.")
        last_update_time = datetime.datetime.now(datetime.timezone.utc)
        db.update_pet_state(pet['owner_id'], pet['hunger'], pet['happiness'], pet['health'], last_update_time.isoformat())
        pet = db.get_pet(pet['owner_id']) # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–º –¥–∞–Ω–Ω—ã–µ –ø–∏—Ç–æ–º—Ü–∞


    current_time = datetime.datetime.now(datetime.timezone.utc)
    time_elapsed = (current_time - last_update_time).total_seconds() / 3600 # –ß–∞—Å—ã

    if time_elapsed <= 0:
        print(f"DEBUG_HELPER: No significant time elapsed ({time_elapsed:.2f}h) for pet {pet['id']}.")
        return pet # –ù–µ—Ç –ø—Ä–æ—à–µ–¥—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º

    print(f"DEBUG_HELPER: Time elapsed for pet {pet['id']}: {time_elapsed:.2f} hours.")

    # –†–∞—Å—á–µ—Ç —É–º–µ–Ω—å—à–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    new_hunger = max(0.0, pet['hunger'] - (HUNGER_DECAY_PER_HOUR * time_elapsed))
    new_happiness = max(0.0, pet['happiness'] - (HAPPINESS_DECAY_PER_HOUR * time_elapsed))

    # –ó–¥–æ—Ä–æ–≤—å–µ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –º–µ–¥–ª–µ–Ω–Ω–µ–µ, –Ω–æ —É—Å–∫–æ—Ä—è–µ—Ç—Å—è –ø—Ä–∏ –Ω–∏–∑–∫–æ–º –≥–æ–ª–æ–¥–µ/—Å—á–∞—Å—Ç—å–µ
    health_decay_multiplier = 1.0
    if new_hunger < HUNGER_THRESHOLD_SAD:
        health_decay_multiplier += 0.5 # –£—Å–∫–æ—Ä—è–µ—Ç –ø–æ—Ç–µ—Ä—é –∑–¥–æ—Ä–æ–≤—å—è –µ—Å–ª–∏ –≥–æ–ª–æ–¥–µ–Ω
        print(f"DEBUG_HELPER: Hunger below threshold for pet {pet['id']}, increasing health decay.")
    if new_happiness < HAPPINESS_THRESHOLD_SAD:
        health_decay_multiplier += 0.5 # –£—Å–∫–æ—Ä—è–µ—Ç –ø–æ—Ç–µ—Ä—é –∑–¥–æ—Ä–æ–≤—å—è –µ—Å–ª–∏ –Ω–µ—Å—á–∞—Å—Ç–µ–Ω
        print(f"DEBUG_HELPER: Happiness below threshold for pet {pet['id']}, increasing health decay.")

    new_health = max(0.0, pet['health'] - (HEALTH_DECAY_PER_HOUR * time_elapsed * health_decay_multiplier))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–µ—Ä—Ç—å
    if new_hunger <= 0 or new_happiness <= 0 or new_health <= 0:
        db.kill_pet(pet['owner_id'])
        pet['is_alive'] = 0
        pet['hunger'] = 0.0
        pet['happiness'] = 0.0
        pet['health'] = 0.0
        print(f"DEBUG_PET_STATE: Pet {pet['name']} (owner {pet['owner_id']}) has died due to low stats.")
    else:
        db.update_pet_state(pet['owner_id'], new_hunger, new_happiness, new_health, current_time.isoformat())
        pet['hunger'] = new_hunger
        pet['happiness'] = new_happiness
        pet['health'] = new_health
        print(f"DEBUG_PET_STATE: Pet {pet['name']} (owner {pet['owner_id']}) state updated to H:{new_hunger:.1f}, P:{new_happiness:.1f}, L:{new_health:.1f}.")

    return pet

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram –±–æ—Ç–∞ ---

# --- –í—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ ---
# –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –°–¢–†–û–ì–û –ü–ï–†–ï–î –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
# –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–µ–¥ @bot.callback_query_handler(func=lambda call: call.data.startswith('choose_pet_'))
@bot.callback_query_handler(func=lambda call: True)
def debug_all_callbacks(call):
    print(f"DEBUG_ALL_CALLBACKS: Received callback_data: '{call.data}' from user {call.from_user.id}")
    # –í–∞–∂–Ω–æ: –ù–ï –≤—ã–∑—ã–≤–∞–π—Ç–µ bot.answer_callback_query –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –µ–µ —É –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∏ —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ –æ—Ç–ª–∞–¥–∫–∏.

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ---
@bot.message_handler(commands=['start'])
def send_welcome(message):
    print(f"DEBUG: /start command received from user {message.from_user.id}")
    user_telegram_id = message.from_user.id
    username = message.from_user.username if message.from_user.username else f"id{user_telegram_id}"
    chat_id = message.chat.id

    try:
        user = db.get_user(user_telegram_id)
        if not user:
            print(f"DEBUG: User {user_telegram_id} not found, creating new user.")
            user = db.create_user(user_telegram_id, username)
            if not user: # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ create_user –≤–µ—Ä–Ω—É–ª None
                bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∞—à—É —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                print(f"ERROR: Failed to create user for telegram_id {user_telegram_id}.")
                return

            bot.send_message(chat_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Tamacoin Game! –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞:")

            markup = types.InlineKeyboardMarkup()
            for pet_type_key, pet_info in PET_TYPES.items():
                markup.add(types.InlineKeyboardButton(text=pet_info['name'], callback_data=f"choose_pet_{pet_type_key}"))
            bot.send_message(chat_id, "–ö–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Å—Ç–∏?", reply_markup=markup)
            print("DEBUG: Sent pet selection message to new user.")
        else:
            print(f"DEBUG: User {user_telegram_id} already exists. Checking for pet.")
            # User exists, check if they have a pet
            pet = db.get_pet(user['id'])
            if pet:
                # Update pet state before showing status
                print(f"DEBUG: User {user_telegram_id} has pet {pet['id']}. Updating pet stats over time.")
                pet = update_pet_stats_over_time(pet)
                
                status_text, image_path = get_pet_status_and_image(pet)
                
                # Check if pet is dead
                if pet['is_alive'] == 0:
                    bot.send_message(chat_id, f"–ü—Ä–∏–≤–µ—Ç —Å–Ω–æ–≤–∞, {user['username']}! –í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']} Tamacoin.")
                    bot.send_message(chat_id, f"–í–∞—à –ø–∏—Ç–æ–º–µ—Ü {pet['name']} –º–µ—Ä—Ç–≤. üò¢\n"
                                               f"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –∑–∞ {NEW_PET_COST} Tamacoin, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /new_pet (–µ—Å–ª–∏ –æ–Ω–∞ —É –≤–∞—Å –µ—Å—Ç—å) –∏–ª–∏ –Ω–∞–∂–∞–≤ /start –µ—â–µ —Ä–∞–∑.")
                    try:
                        with open(PET_IMAGES['dead_pet'], 'rb') as photo:
                            bot.send_photo(chat_id, photo, caption="–ü–æ–∫–æ–π—Å—è —Å –º–∏—Ä–æ–º, –¥—Ä—É–≥.")
                        print(f"DEBUG: Sent dead pet photo for user {user_telegram_id}.")
                    except FileNotFoundError:
                        bot.send_message(chat_id, "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–≥–∏–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                        print(f"ERROR: Image not found at {PET_IMAGES['dead_pet']} for user {user_telegram_id}.")
                    except Exception as e:
                        bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ. –í–∞—à —Å—Ç–∞—Ç—É—Å:\n{status_text}")
                        print(f"ERROR: Failed to send dead pet photo for user {user_telegram_id}: {e}")
                        import traceback
                        traceback.print_exc()

                    return # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–∏—Ç–æ–º–µ—Ü –º–µ—Ä—Ç–≤

                bot.send_message(chat_id, f"–ü—Ä–∏–≤–µ—Ç —Å–Ω–æ–≤–∞, {user['username']}! –í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']} Tamacoin.")
                
                try:
                    with open(image_path, 'rb') as photo:
                        bot.send_photo(chat_id, photo, caption=status_text)
                    print(f"DEBUG: Sent pet status photo for existing user {user_telegram_id}.")
                except FileNotFoundError:
                    bot.send_message(chat_id, f"–û–π, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–∏—Ç–æ–º—Ü–∞. –í–∞—à —Å—Ç–∞—Ç—É—Å:\n{status_text}")
                    print(f"ERROR: Image not found at {image_path} for user {user_telegram_id}.")
                except Exception as e:
                    bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ. –í–∞—à —Å—Ç–∞—Ç—É—Å:\n{status_text}")
                    print(f"ERROR: Failed to send photo for user {user_telegram_id}: {e}")
                    import traceback
                    traceback.print_exc()

                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–∏—Ç–æ–º—Ü–µ–º (Feed, Play, Clean)
                # markup_actions = types.InlineKeyboardMarkup()
                # markup_actions.add(types.InlineKeyboardButton("–ö–æ—Ä–º–∏—Ç—å", callback_data="feed_pet"))
                # markup_actions.add(types.InlineKeyboardButton("–ò–≥—Ä–∞—Ç—å", callback_data="play_pet"))
                # markup_actions.add(types.InlineKeyboardButton("–£–±—Ä–∞—Ç—å", callback_data="clean_pet"))
                # bot.send_message(chat_id, "–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å —Å –ø–∏—Ç–æ–º—Ü–µ–º?", reply_markup=markup_actions)

            else:
                print(f"DEBUG: User {user_telegram_id} exists but has no pet. Prompting for selection.")
                bot.send_message(chat_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ! –í—ã –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –ø–∏—Ç–æ–º—Ü–∞. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ–≥–æ:")
                markup = types.InlineKeyboardMarkup()
                for pet_type_key, pet_info in PET_TYPES.items():
                    markup.add(types.InlineKeyboardButton(text=pet_info['name'], callback_data=f"choose_pet_{pet_type_key}"))
                bot.send_message(chat_id, "–ö–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Å—Ç–∏?", reply_markup=markup)
                print("DEBUG: Sent pet selection message to existing user without pet.")
    except Exception as e:
        print(f"ERROR: Unhandled exception in send_welcome for user {user_telegram_id}: {e}")
        import traceback
        traceback.print_exc()
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∏—Ç–æ–º—Ü–∞ ---
@bot.callback_query_handler(func=lambda call: call.data.startswith('choose_pet_'))
def callback_choose_pet(call):
    print(f"DEBUG: callback_choose_pet called for user {call.from_user.id} with data '{call.data}'")
    chat_id = call.message.chat.id
    user_telegram_id = call.from_user.id
    message_id = call.message.message_id
    
    try:
        user = db.get_user(user_telegram_id)
        if not user:
            print(f"ERROR: User {user_telegram_id} not found in DB during callback_choose_pet. This shouldn't happen after /start. Creating user.")
            username = call.from_user.username if call.from_user.username else f"id{user_telegram_id}"
            user = db.create_user(user_telegram_id, username)
            if not user:
                bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                print(f"ERROR: Failed to create user {user_telegram_id} even after retry in callback_choose_pet.")
                return

        if user['pet_id']:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–∏—Ç–æ–º–µ—Ü!")
            bot.send_message(chat_id, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–∏—Ç–æ–º–µ—Ü. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status.")
            print(f"DEBUG: User {user_telegram_id} already has a pet, callback handled.")
            return

        pet_type_key = call.data.replace('choose_pet_', '')
        if pet_type_key not in PET_TYPES:
            bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–∏—Ç–æ–º—Ü–∞.")
            print(f"ERROR: Unknown pet type key received: {pet_type_key} from user {user_telegram_id}.")
            return

        pet_info = PET_TYPES[pet_type_key]
        pet_name = pet_info['name'] # –ò–ª–∏ –º–æ–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–≤–µ—Å—Ç–∏ –∏–º—è
        
        # owner_id –≤ —Ç–∞–±–ª–∏—Ü–µ pets - —ç—Ç–æ id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users (PRIMARY KEY)
        # –ü–æ–ª—É—á–∞–µ–º user['id'] –∏–∑ user-–æ–±—ä–µ–∫—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω–æ–≥–æ db.get_user
        owner_db_id = user['id'] 
        print(f"DEBUG: Creating pet for owner_db_id: {owner_db_id} with type {pet_type_key}.")
        new_pet = db.create_pet(owner_db_id, pet_type_key, pet_name)

        if new_pet:
            bot.answer_callback_query(call.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {pet_name}!")
            status_text, image_path = get_pet_status_and_image(new_pet)
            
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
                with open(image_path, 'rb') as photo:
                    bot.send_photo(chat_id, photo, caption=f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –∑–∞–≤–µ–ª–∏ {pet_name}!\n\n{status_text}")
                print(f"DEBUG: Sent new pet photo to user {user_telegram_id}.")
            except FileNotFoundError:
                bot.send_message(chat_id, f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –∑–∞–≤–µ–ª–∏ {pet_name}!\n\n–û–π, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–∏—Ç–æ–º—Ü–∞. –í–∞—à —Å—Ç–∞—Ç—É—Å:\n{status_text}")
                print(f"ERROR: Image not found at {image_path} for new pet of user {user_telegram_id}.")
            except Exception as e:
                bot.send_message(chat_id, f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –∑–∞–≤–µ–ª–∏ {pet_name}!\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ. –í–∞—à —Å—Ç–∞—Ç—É—Å:\n{status_text}")
                print(f"ERROR: Failed to send new pet photo for user {user_telegram_id}: {e}")
                import traceback
                traceback.print_exc()

            # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–∏—Ç–æ–º—Ü–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
            try:
                bot.edit_message_reply_markup(chat_id, message_id, reply_markup=None) 
                print(f"DEBUG: Pet selection buttons removed for user {user_telegram_id}.")
            except Exception as e:
                print(f"ERROR: Failed to edit message reply markup for user {user_telegram_id}: {e}")
                # –≠—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –Ω–æ —Å—Ç–æ–∏—Ç –æ—Ç–º–µ—Ç–∏—Ç—å
                pass

            bot.send_message(chat_id, "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ —Å–≤–æ–∏–º –ø–∏—Ç–æ–º—Ü–µ–º, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ /feed, /play, /clean –∏ —Ç.–¥.")
        else:
            bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∏—Ç–æ–º—Ü–∞.")
            print(f"ERROR: Failed to create pet for user {user_telegram_id} for unknown reason.")

    except Exception as e:
        print(f"ERROR: Unhandled exception in callback_choose_pet for user {call.from_user.id}: {e}")
        import traceback
        traceback.print_exc()
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞.")
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info ---
@bot.message_handler(commands=['info'])
def send_info(message):
    print(f"DEBUG: /info command received from user {message.from_user.id}")
    bot.send_message(message.chat.id, INFO_TEXT, parse_mode='Markdown')
    print("DEBUG: Sent INFO_TEXT.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help ---
@bot.message_handler(commands=['help'])
def send_help(message):
    print(f"DEBUG: /help command received from user {message.from_user.id}")
    bot.send_message(message.chat.id, HELP_TEXT, parse_mode='Markdown')
    print("DEBUG: Sent HELP_TEXT.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status ---
@bot.message_handler(commands=['status'])
def send_status(message):
    print(f"DEBUG: /status command received from user {message.from_user.id}")
    user_telegram_id = message.from_user.id
    chat_id = message.chat.id

    try:
        user = db.get_user(user_telegram_id)
        if not user:
            bot.send_message(chat_id, "–í—ã –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.")
            print(f"DEBUG: User {user_telegram_id} not found for /status.")
            return

        pet = db.get_pet(user['id'])
        if not pet:
            bot.send_message(chat_id, "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞! –í—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start.")
            print(f"DEBUG: User {user_telegram_id} has no pet for /status.")
            return

        pet = update_pet_stats_over_time(pet) # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞

        status_text, image_path = get_pet_status_and_image(pet)
        user_balance_text = f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']} Tamacoin."

        try:
            with open(image_path, 'rb') as photo:
                bot.send_photo(chat_id, photo, caption=f"{user_balance_text}\n\n{status_text}")
            print(f"DEBUG: Sent pet status photo for user {user_telegram_id} via /status.")
        except FileNotFoundError:
            bot.send_message(chat_id, f"{user_balance_text}\n\n–û–π, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–∏—Ç–æ–º—Ü–∞. –í–∞—à —Å—Ç–∞—Ç—É—Å:\n{status_text}")
            print(f"ERROR: Image not found at {image_path} for user {user_telegram_id} via /status.")
        except Exception as e:
            bot.send_message(chat_id, f"{user_balance_text}\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ. –í–∞—à —Å—Ç–∞—Ç—É—Å:\n{status_text}")
            print(f"ERROR: Failed to send photo for user {user_telegram_id} via /status: {e}")
            import traceback
            traceback.print_exc()

    except Exception as e:
        print(f"ERROR: Unhandled exception in send_status for user {user_telegram_id}: {e}")
        import traceback
        traceback.print_exc()
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# --- –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–¥–µ—Å—å ---
# –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ /feed, /play, /clean, /shop, /daily_bonus,
# /users_count, /admin_stats –∏ —Ç.–¥., –í–°–¢–ê–í–¨–¢–ï –ò–• –°–Æ–î–ê.
# –ü—Ä–∏–º–µ—Ä:
# @bot.message_handler(commands=['feed'])
# def feed_pet_command(message):
#     # ... –≤–∞—à –∫–æ–¥ –¥–ª—è /feed ...
#     pass

# @bot.message_handler(commands=['play'])
# def play_pet_command(message):
#     # ... –≤–∞—à –∫–æ–¥ –¥–ª—è /play ...
#     pass

# @bot.message_handler(commands=['clean'])
# def clean_pet_command(message):
#     # ... –≤–∞—à –∫–æ–¥ –¥–ª—è /clean ...
#     pass

# @bot.message_handler(commands=['shop'])
# def open_shop(message):
#     # ... –≤–∞—à –∫–æ–¥ –¥–ª—è /shop ...
#     pass

# @bot.message_handler(commands=['daily_bonus'])
# def get_daily_bonus(message):
#     # ... –≤–∞—à –∫–æ–¥ –¥–ª—è /daily_bonus ...
#     pass

# @bot.message_handler(commands=['users_count'])
# def get_users_count(message):
#     # ... –≤–∞—à –∫–æ–¥ –¥–ª—è /users_count ...
#     pass

# @bot.message_handler(commands=['admin_stats'])
# def admin_stats(message):
#     # ... –≤–∞—à –∫–æ–¥ –¥–ª—è /admin_stats ...
#     pass


# --- Webhook setup (–¥–ª—è Render.com) ---
@app.route(f'/{API_TOKEN}', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        print(f"DEBUG_WEBHOOK: Received webhook update: {json_string[:200]}...") # –õ–æ–≥–∏—Ä—É–µ–º —á–∞—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        try:
            update = telebot.types.Update.de_json(json_string)
            bot.process_new_updates([update])
            print("DEBUG_WEBHOOK: Successfully processed update.")
            return '', 200
        except Exception as e:
            print(f"ERROR_WEBHOOK: Error processing update: {e}")
            import traceback
            traceback.print_exc()
            return '', 500 # Internal Server Error
    else:
        print("ERROR_WEBHOOK: Webhook received non-JSON content. Content-Type:", request.headers.get('content-type'))
        return '', 403 # Forbidden

# --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
if __name__ == '__main__':
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ WEBHOOK_HOST –æ–ø—Ä–µ–¥–µ–ª–µ–Ω)
    if API_TOKEN and WEBHOOK_HOST:
        print("DEBUG: API_TOKEN and WEBHOOK_HOST are set. Attempting to set webhook.")
        try:
            bot.remove_webhook() # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            print("DEBUG: Old webhook removed (if any).")
            bot.set_webhook(url=WEBHOOK_URL)
            print(f"DEBUG: Webhook set to {WEBHOOK_URL}")
            # Flask –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ –≤—Å–µ—Ö –∞–¥—Ä–µ—Å–∞—Ö –Ω–∞ –ø–æ—Ä—Ç—É 10000, –∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç Render.com
            print("DEBUG: Starting Flask app.run on 0.0.0.0:PORT.")
            app.run(host="0.0.0.0", port=int(os.environ.get('PORT', 10000)))
            print("DEBUG: Flask app.run started.") # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –º–æ–∂–µ—Ç –Ω–µ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å—Å—è, –µ—Å–ª–∏ app.run –±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤
        except Exception as e:
            print(f"FATAL_ERROR: Failed to set webhook or start Flask app: {e}")
            import traceback
            traceback.print_exc()
    else:
        print("ERROR: API_TOKEN or WEBHOOK_HOST environment variable not set.")
        print("Bot will not run via webhook on Render.com.")
        print("For local testing, consider uncommenting bot.polling(none_stop=True).")
        # bot.polling(none_stop=True) # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –≤–µ–±—Ö—É–∫–∞, –µ—Å–ª–∏ –Ω–µ—Ç –≤–µ–±—Ö—É–∫–∞

